
=================================================
Nginx安装
yum -y install gcc gcc-c++
yum -y install openssl openssl-devel
yum -y install pcre pcre-devel 
yum -y install zlib zlib-devel
一般我们都需要先装pcre, zlib，前者为了重写rewrite，后者为了gzip压缩。

groupadd www
useradd www -g www

wget http://iweb.dl.sourceforge.net/project/pcre/pcre/8.36/pcre-8.36.tar.gz
wget http://iweb.dl.sourceforge.net/project/libpng/zlib/1.2.8/zlib-1.2.8.tar.gz
wget http://nginx.org/download/nginx-1.4.7.tar.gz

./configure \
--prefix=/usr/local/nginx \
--with-http_ssl_module \
--with-pcre=../pcre-8.36 \
--with-zlib=../zlib-1.2.8 \
--user=www \
--group=www \

启动：/usr/local/nginx/sbin/nginx
停止：/usr/local/nginx/sbin/nginx -s stop
重启：/usr/local/nginx/sbin/nginx -s reload

ps -ef|grep nginx

vi /etc/init.d/nginx
chmod +x /etc/init.d/nginx

chkconfig --add /etc/init.d/nginx 将nginx服务加入chkconfig管理列表
chkconfig nginx on  设置终端模式开机启动

service nginx start

===================================================

//备份下原来老的nginx文件
sudo mv /usr/local/webservice/nginx/sbin/nginx /usr/local/webservice/nginx/sbin/nginx.old
//进入objs目录拷贝nginx文件
cd objs
sudo cp nginx /usr/local/webserver/nginx/sbin/nginx
//测试看看
/usr/local/webserver/nginx/sbin/nginx -t
//返回上级目录
cd ../
//升级nginx
sudo make upgrade

====================================================

server {
	listen       80;
	server_name  localhost;
    index  index.php index.html index.htm;
    root   /data/wwwroot/default;

	location ~ \.php$ {
		include fastcgi.conf;
		fastcgi_pass   127.0.0.1:9000;
	}
	
	location / {
		try_files $uri $uri/ /index.php?$args;
	}
}
====================================================
server {
	listen       80;
	server_name  haocheweb.com *.haocheweb.com;
    index  index.php index.html index.htm;
    root   D:/web_mainsite_v1/;
	
	location ~ \.php$ {
		fastcgi_pass   127.0.0.1:9000;
		include fastcgi.conf;
	}
	
	location / {
		try_files $uri $uri/ /index.php?$args;
	}
	
	location ~ \.(js|css|jpg|jpeg|png|gif|ico)$ {
        access_log off;
        log_not_found off; 
		#expires max;
    }
	
	error_page  500 502 503 504  /50x.html;
	location = /50x.html {
		root   html;
	}
	
	location ^~ /.git {
		deny all;
    }
	
	#add_header Set-Cookie 'UUID=uuid; expires=31 Dec 2099 23:55:55 GMT';
	if ($http_cookie ~* "HCUID=(\S+)(;.*|$)"){
		set $hcuid $1;
	}
	
	access_log logs/haoche51_web_access.log haoche51_web;
	error_log logs/haoche51_web_error.log;
	#error_log /dev/null crit;
}

====================================================

Nginx 反向代理
server {
	listen          80;
	server_name     t.vpser.net;

	location / {
		proxy_pass              http://twitter.com/;
		proxy_redirect          off;
		proxy_set_header    	Host            $host;
		proxy_set_header        X-Real-IP       $remote_addr;
		proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
	}
}

=======================================================

#WebSocket Proxy
http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
	
		listen       80;
		server_name  ws.example.com;
		/*
		listen       443;
		server_name  ws.example.com;

		ssl on;
		ssl_certificate ws.example.com.bundle.crt;
		ssl_certificate_key ws.example.com.key;
		ssl_session_timeout 5m;
		ssl_protocols  SSLv2 SSLv3 TLSv1;
		ssl_ciphers  HIGH:!aNULL:!MD5;
		ssl_prefer_server_ciphers   on;*/
	
        location /chat/ {
			/*
			access_log off;
			proxy_pass http://ws.example.com:10080;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			*/
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            #proxy_set_header Connection $connection_upgrade;
			proxy_set_header Connection "upgrade";
        }
    }
}

=======================================================

Nginx 负载均衡
upstream a.com {
	ip_hash 
    server 127.0.0.1:8000 down;
    server 127.0.0.1:8080 weight=2;
    server 127.0.0.1:6801;
    server 127.0.0.1:6802 backup;
}
#ip_hash 指令解决session共享问题
#ip_hash 和 backup 指令不能同时使用

1.down 表示单前的server暂时不参与负载
2.weight 默认为1.weight越大，负载的权重就越大。
3.max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误
4.fail_timeout:max_fails次失败后，暂停的时间。
5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。
======================================================

动静分离
upstream php {
    server 192.168.10.10:80  #php给这个服务器处理
}

upstream static {
    server 192.168.10.11:80 #html给这个服务器处理
}
server{
    listen 80;
    server_name a.com;
    location / { #匹配所有静态资源文件用这个代理
        proxy_pass         http://static;   #这个地址一定是上面定义的负载均衡的名字
        proxy_set_header   Host             $host;
        proxy_set_header   X-Real-IP        $remote_addr;
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    }

    location ~ \.php$ { #匹配php文件用这个代理
        proxy_pass         http://php;   #这个地址一定是上面定义的负载均衡的名字
        proxy_set_header   Host             $host;
        proxy_set_header   X-Real-IP        $remote_addr;
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    }
}
========================================================

Nginx的防盗链
location ~* \.(gif|jpg|png|swf|flv)$ {
	valid_referers none blocked www.mydomain.com *.mydomain.com; 
	if ($invalid_referer) {
		return 403;
	}
}

========================================================

## Deny access to any host other than (www.).你的域名.com
server {
	server_name _; #default
	return 444;
}

========================================================
域名镜向 

server { 
    listen 80; 
    server_name mirror.jjonline.cn; 
    index index.html index.htm index.php; 
    root /var/www/public_html; 
    rewrite ^/(.*) http://www.xxx.cn/$1 last; 
    access_log off; 
} 
========================================================
三、自行颁发不受浏览器信任的SSL证书

# 生成一个RSA密钥 
$ openssl genrsa -des3 -out ttt.key 1024
 
# 拷贝一个不需要输入密码的密钥文件
$ openssl rsa -in ttt.key -out ttt_nopass.key
 
# 生成一个证书请求
$ openssl req -new -key ttt.key -out ttt.csr
 
# 自己签发证书
$ openssl x509 -req -days 365 -in ttt.csr -signkey ttt.key -out ttt.crt
========================================================
server_tokens off; #关闭nginx版本号

gzip  on;
gzip_min_length 1k;
gzip_buffers 4 16k;
#gzip_http_version 1.0; #用了反向代理的话，末端通信是HTTP/1.0，默认是HTTP/1.1
gzip_comp_level 2;
gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript application/x-httpd-php image/jpeg image/gif image/png;
gzip_vary off; #跟Squid等缓存服务有关，on的话会在Header里增加"Vary: Accept-Encoding"
gzip_disable "MSIE [1-6]\.";

log_format  haoche51_web  '$remote_addr - $remote_user [$time_local] "$request" '
				  '$status $body_bytes_sent "$http_referer" '
				  '"$http_user_agent" "$http_x_forwarded_for" "$request_time" "$hcuid"';

========================================================


large_client_header_buffers 4 16k;
client_max_body_size 30m;
client_body_buffer_size 128k;
#proxy_connect_timeout 300;
#proxy_read_timeout 300;
#proxy_send_timeout 300;
#proxy_buffer_size 64k;
#proxy_buffers   4 32k;
#proxy_busy_buffers_size 64k;
#proxy_temp_file_write_size 64k;

fastcgi_connect_timeout 300;
fastcgi_read_timeout 300;
fastcgi_send_timeout 300;
fastcgi_buffer_size 64k;
fastcgi_buffers   4 32k;
fastcgi_busy_buffers_size 64k;
fastcgi_temp_file_write_size 64k;



