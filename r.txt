
Sys.setlocale("LC_ALL","zh_CN.UTF-8")

args <- commandArgs(T)
if (!is.na(args[1])) {

}
===================================================
更新插件

#先卸载了你的原始版本，
#装最新版
#原来的library文件夹文件拷贝到新library下
update.packages(checkBuilt=TRUE, ask=FALSE)

===================================================
安装插件

#在最新版本的R下可以直接安装：
install.packages("Rwordseg", repos = "http://R-Forge.R-project.org")
R CMD INSTALL C:\Users\xwj\Downloads\Rwordseg_0.2-1.zip

#如果是旧版本的R，可以通过source的方式进行安装：
install.packages("Rwordseg", repos = "http://R-Forge.R-project.org", type = "source")

==================================================
#R安装
wget http://ftp.ctex.org/mirrors/CRAN/src/base/R-3/R-3.0.2.tar.gz
wget http://ftp.ctex.org/mirrors/CRAN/src/base/R-3/R-3.2.0.tar.gz
wget http://pkgs.fedoraproject.org/lookaside/extras/R/R-3.0.2.tar.gz/f9a8374736e7650e4848f33e2e3bbee3/R-3.0.2.tar.gz
yum install gcc-gfortran   //configure: error: No F77 compiler found
yum install gcc gcc-c++
yum install readline-devel  //configure: error: --with-readline=yes (default) and headers/libs are not available
yum install libXt-devel   || ssudo apt-get install libxt-dev  //configure: error: --with-x=yes (default) and X11 headers/libs are not available
./configure --prefix=/usr/local/R --with-readline=yes --disable-nls --enable-R-shlib --with-libpng --with-jpeglib --with-libtiff --with-x --with-cairo
#后面两个选项--disable-nls --enable-R-shlib是为RHive的安装座准备，如果不安装RHive可以省去
./configure --prefix=/usr/local/R --enable-R-shlib --with-system-xz=no
#enable-R-shlib可以保证lib目录下的动态库能够共享，这个选项一定不要忘记添加，否则以后安装某些包的时候会出现Error in dyn.load的错误。

make
make install
ln -s /usr/local/R/bin/R /usr/local/bin/R

#安装java 默认安装在/usr/lib/jvm
yum -y list java*
yum -y install java-1.7.0-openjdk*
R CMD javareconf

Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.7.0_09/jre');

install.packages('reshape2')
install.packages('stringr')
install.packages('RMysql')
install.packages('RJDBC')
install.packages('ggplot2')
#install.packages('ggpmap')

library(dplyr)
==========================================================================

#R语言连接数据库

#RJDBC连接SQLServer
library(RJDBC)
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver", "/root/sqljdbc4.jar") 
conn <- dbConnect(drv, "jdbc:sqlserver://10.10.178.65", "websplitword", "Split@word.com")
dbGetQuery(conn, "SELECT Name FROM Master..SysDatabases ORDER BY Name;")
dbGetQuery(conn, "SELECT Name FROM DatabaseName..SysObjects Where XType='U' ORDER BY Name;")
dbSendUpdate(conn, "DELETE FROM 表名")
dbSendUpdate(conn, "truncate table [DBHighend].[dbo].[Extract_Hour_Day]")

#RJDBC连接MySQL
library(RJDBC)
drv <- JDBC("com.mysql.jdbc.Driver", "/root/mysql-connector-java-5.1.6-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://localhost/sdk", "root", "mysql53!!!")

#RJDBC连接Hive
library("RJDBC")
f <- list.files("/root/hive_jdbc-0.9.0", pattern="*jar$", full.names=T)
jdrv <- JDBC("org.apache.hadoop.hive.jdbc.HiveDriver", f)
conn <- dbConnect(jdrv, "jdbc:hive://192.168.1.244:10000")
dbGetQuery(conn, "show tables")

=====================================================
yum install mysql-devel
library(RMySQL)
conn <- dbConnect(dbDriver("MySQL"), dbname="test", username="root", password="root", host="localhost")
dbListTables(conn)
dbListFields(conn, table)
dbExistsTable(conn, table)
dbReadTable(conn, table)
dbWriteTable(conn, table, df)
dbRemoveTable(conn, table)
dbWriteTable(conn, table, df, overwrite=F, append=T, row.names=F, field.types=list(field1='varchar(500)', field2='int(11)'))
dbDisconnect(conn)
dbSendQuery(conn, "DELETE FROM 表名")
dbGetQuery(conn, "ALTER TABLE `table` ADD INDEX url_key(`url`)")
dbGetQuery(conn, "ALTER TABLE 原表名 RENAME TO 新表名")

#清除数据库连接
all_cons <- dbListConnections(MySQL())
for(con in all_cons) {
	dbDisconnect(con)
}

library(RSQLite)
conn <- dbConnect(dbDriver("SQLite"), dbname="D:/test.db")

============================================================================

#RODBC连接MySQL
library(RODBC)
conn<-odbcConnect("mysql_data",uid="root",pwd="root")
sqlQuery(conn,"select * from aaaa limit 1")

#RODBC连接Access
library(RODBC)
channel <- odbcConnect("ireSqlserver")  # ireSqlserver为已配制好的本地数据源
channel <- odbcDriverConnect("driver=SQL Server, server=xxx.xxx.x.xx, database=ireSqlserver, uid=xxxx, pwd=xxxx")
sqlQuery(channel, "select * from ireTest")

sqlTables(conn)
odbcClose(conn)

================================================================

setwd('D:/BaiduYunDownload/2000W')

#R中读取大数据
options(scipen=200)
file <- '5000.csv'
rows <- read.table(file, nrows=25);
classes <- sapply(rows, class)
classes[c(-1,-3)] <- rep("NULL", length(classes)-2)
data <- read.table(file, colClasses=classes)

#读取写入数据
data <- read.table('/root/tm.txt', sep="\t", quote="", comment.char="")
write.table(data, file='/root/tm.txt', quote=F, sep="\t", row.names=F, col.names=F)

#提取域名
urls <- paste(urls, '/', sep="")
domains <- sub(pattern="https?://(.+?)[/|?].*", replacement="\\1", urls)

#读取文件夹所有文件
all.files <- list.files(path="rdata",full.names=T,pattern=".txt")
all.files
mylist <- lapply(all.files,function(i) read.csv(i, head=F))
mylist <- lapply(all.files,function(i) read.table(i, head=F, sep="\t", comment="", quote=""))
mylist <- lapply(all.files,function(i) cbind.data.frame(scan(i, what=list(x=1, y=""),quiet=T, flush=T)))
mydata <- do.call('rbind',mylist)

#R中按行读取大数据
library(Rwordseg)
library(stringr)

#1w 10s
ptm <- proc.time()
infile <- file("200W-400W.csv","r")
outfile <- file("111.txt", "aw")
outfile2 <- file("222.txt", "w")
line = readLines(infile, 1, encoding='UTF-8')
i <- 1
while(length(line)!=0){
	#a <- segmentCN(line)
	#ret <- paste(a[str_length(a)>1], collapse=',')
	#cat(ret, "\n", file=outfile, append=T)
	
	if (i%%1000==0) {
		print(i)
	}
	aa <- str_split(line, ",");
	if (length(aa[[1]])<33) {
		if (i%%2==1) {
			cat(line, file=outfile, append=T)
		} else {
			cat(line, "\n", file=outfile, append=T)
		}
	} else {
		cat(line, "\n", file=outfile2, append=T)
	}
	i <- i+1
	line = readLines(infile, n=1, encoding='UTF-8')
}
close(infile)
close(outfile)
close(outfile2)
proc.time() - ptm

#1w 6s
ptm <- proc.time()
segmentCN('D:/dd1.txt')
proc.time() - ptm

#分词
#1w 14s
ptm <- proc.time()
rr <- data.frame()
dd <- read.table('city.csv', sep=",", comment="", fileEncoding="UTF-8")
for(i in 1:nrow(dd)) {
	a <- segmentCN(as.character(dd[i,'V1']))
	rr[i,1] <- paste(a[str_length(a)>1], collapse=',')
}
write.table(rr, file='D:/dd4.txt', quote=F, sep="\t", row.names=F, col.names=F)
proc.time() - ptm

================================================================================

library(stringr)
 
# 合并字符串
fruit <- c("apple", "banana", "pear", "pinapple")
res <- str_c(1:4,fruit,sep=' ',collapse=' ')
str_c('I want to buy ',res,collapse=' ')
 
# 计算字符串长度
str_length(c("i", "like", "programming R", 123,res))
 
# 按位置取子字符串
str_sub(fruit, 1, 3)
# 子字符串重新赋值
capital <-toupper(str_sub(fruit,1,1))
str_sub(fruit, rep(1,4),rep(1,4)) <- capital 
 
# 重复字符串
str_dup(fruit, c(1,2,3,4))
 
# 加空白
str_pad(fruit, 10, "both")
# 去除空白
str_trim(fruit)
 
#  根据正则表达式检验是否匹配
str_detect(fruit, "a$")
str_detect(fruit, "[aeiou]")
str_detect('13200000020', "^1[3458][0-9]{9}$")
str_detect(email, "^([a-zA-Z0-9_\\.\\-])+@(([a-zA-Z0-9\\-])+\\.)+[a-zA-Z]{2,4}$")
 
# 找出匹配的字符串位置
str_locate(fruit, "a")
 
# 提取匹配的部分
str_extract(fruit, "[a-z]+")
str_match(fruit, "[a-z]+")
 
# 替换匹配的部分
str_replace(fruit, "[aeiou]", "-")
 
# 分割
str_split(res, " ")

===========================================================================================

#转化时间戳
#as.numeric(as.POSIXlt(Sys.Date(), tz="PRC"))
#format(as.POSIXct(Sys.Date()), "%s", tz="PRC")
#format(as.POSIXct(Sys.time()), "%s", tz="PRC")

#as.numeric(as.POSIXct("2014-01-14 02:02:02", tz="PRC"))
#format(as.POSIXct("2014-01-14 02:02:02"), "%s", tz="PRC")

format(Sys.time(),"%Y-%m-%d %H:%M:%S", tz="PRC")


asNumeric <- function(x) as.numeric(as.character(x))
#asNumeric2 <- function(x) as.numeric(gsub('![[:alnum:]]*[[:space:]]|[[:punct:]]', '', as.character(x)))
strtotime <- function(x) as.numeric(as.POSIXct(x, tz="PRC"))
strtotime('2014-01-14')
date22 <- function(x) format(x,"%Y-%m-%d %H:%M:%S", tz="PRC")
date22('1389628800')


trim <- function (x) gsub("^\\s+|\\s+$", "", x)

datadistribution<-function(x,na.omit=F){
  if(na.omit){
    x<-x[!is.na(x)]
  }
  
  m<-mean(x)
  n<-length(x)
  s<-sd(x)
  skew<-sum((x-m)^3/s^3)/n
  kurt<-sum((x-m)^4/s^4)/n-3
  return(c(n=n,mean=m,stdev=s,skew=skew,kurtosis=kurt))
}


