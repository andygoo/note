
启动
mongod --fork --logpath=/var/log/mongodb/mongod.log --dbpath=/var/lib/mongodb --auth --rest

#bind_ip = 127.0.0.1   //注释此行 
auth = true       //将此行前的注释去掉

登录
mongo -uroot -p'Apache@)@22@MW' admin

show collections
show users
db.createCollection('user')
db.dropDatabase();
db.copyDatabase("mydb", "temp", "127.0.0.1");
7、修复当前数据库
db.repairDatabase();
显示当前db状态
db.stats();
 
use admin
db.addUser('test','test'); 
db.auth('root','Apache@)@22@MW')

mongoexport -u root -p \'Apache@)@22@MW\' admin -d highend20140630 -c mobile --csv -o xx.csv
mongoexport --host localhost --port 37017 --username root --password 'Apache@)@22@MW' --collection mobile --db highend20140630 --out mdb1-examplenet.json

创建索引
db.app_history.getIndexes();
db.tb.ensureIndex({udid:1, vid:1}, {background:true, unique:true, dropDups:true});

db.app_history.ensureIndex({'udid':1, 'vid':1}, {background:true});
db.app_history.ensureIndex({udid:1, t:-1}, {background:true})
db.app_history.ensureIndex({t:-1}, {background:true})

db.app_history2.ensureIndex({udid:1, vid:1})
db.app_history2.ensureIndex({udid:1, t:-1})


db.app_history3.ensureIndex({udid:1, vid:1})
db.app_history3.ensureIndex({udid:1, t:-1})

db.app_history4.ensureIndex({udid:1, vid:1})
db.app_history4.ensureIndex({udid:1, t:-1})

db.app_history5.ensureIndex({udid:1, vid:1})
db.app_history5.ensureIndex({udid:1, t:-1})

db.app_history6.ensureIndex({udid:1, vid:1})
db.app_history6.ensureIndex({udid:1, t:-1})

db.app_history7.ensureIndex({udid:1, vid:1})
db.app_history7.ensureIndex({udid:1, t:-1})

db.app_history8.ensureIndex({udid:1, vid:1})
db.app_history8.ensureIndex({udid:1, t:-1})

db.app_history9.ensureIndex({udid:1, vid:1})
db.app_history9.ensureIndex({udid:1, t:-1})

db.tb.ensureIndex({"properties.user":1,"properties.email":1})
db.app_history.dropIndex({'t':-1})
db.app_history.dropIndex({'udid':1, 't':-1})

db.currentOp()
db.killOp()
终止创建过程

2)创建复合索引

db.collection.ensureIndex({a:1,b:-1})

3）创建稀疏索引

db.collection.ensureIndex({a:1},{sparse:true})

开启profiling功能
db.getProfilingLevel()
db.setProfilingLevel( level , slowms ) 
db.setProfilingLevel( 1 , 10 );

$mongo = new MongoClient("mongodb://192.168.1.106:27017");
$ret = $mongo->selectDB("xhprof")->selectCollection("results");
==================================================================================================

db.key20140114.mapReduce(
    function(){emit(this.key, 1)},
    function(key,values){return Array.sum(values)},
    {query:{},out:"dddd"}
)

====================================================================
INSERT INTO USERS VALUES(1,1)                       $db->users->insert(array("a" => 1, "b" => 1));
SELECT a,b FROM users                               $db->users->find(array(), array("a" => 1, "b" => 1));
SELECT * FROM users WHERE age=33                    $db->users->find(array("age" => 33));
SELECT a,b FROM users WHERE age=33                  $db->users->find(array("age" => 33), array("a" => 1, "b" => 1));
SELECT a,b FROM users WHERE age=33 ORDER BY name    $db->users->find(array("age" => 33), array("a" => 1, "b" => 1))->sort(array("name" => 1));
SELECT * FROM users WHERE age>33                    $db->users->find(array("age" => array('$gt' => 33)));
SELECT * FROM users WHERE age<33                    $db->users->find(array("age" => array('$lt' => 33)));
SELECT * FROM users WHERE name LIKE "%Joe%"         $db->users->find(array("name" => new MongoRegex("/Joe/")));
SELECT * FROM users WHERE name LIKE "Joe%"          $db->users->find(array("name" => new MongoRegex("/^Joe/")));
SELECT * FROM users WHERE age>33 AND age<=40        $db->users->find(array("age" => array('$gt' => 33, '$lte' => 40)));
SELECT * FROM users ORDER BY name DESC              $db->users->find()->sort(array("name" => -1));
CREATE INDEX myindexname ON users(name)             $db->users->ensureIndex(array("name" => 1));
CREATE INDEX myindexname ON users(name,ts DESC)     $db->users->ensureIndex(array("name" => 1, "ts" => -1));
SELECT * FROM users WHERE a=1 and b='q'             $db->users->find(array("a" => 1, "b" => "q"));
SELECT * FROM users LIMIT 20, 10                    $db->users->find()->limit(10)->skip(20);
SELECT * FROM users WHERE a=1 or b=2                $db->users->find(array('$or' => array(array("a" => 1), array("b" => 2))));
SELECT * FROM users LIMIT 1                         $db->users->find()->limit(1);
EXPLAIN SELECT * FROM users WHERE z=3               $db->users->find(array("z" => 3))->explain()
SELECT DISTINCT last_name FROM users                $db->command(array("distinct" => "users", "key" => "last_name"));
SELECT COUNT(*y) FROM users                         $db->users->count();
SELECT COUNT(*y) FROM users where AGE > 30          $db->users->find(array("age" => array('$gt' => 30)))->count();
SELECT COUNT(AGE) from users                        $db->users->find(array("age" => array('$exists' => true)))->count();
UPDATE users SET a=1 WHERE b='q'                    $db->users->update(array("b" => "q"), array('$set' => array("a" => 1)));
UPDATE users SET a=a+2 WHERE b='q'                  $db->users->update(array("b" => "q"), array('$inc' => array("a" => 2)));
DELETE FROM users WHERE z="abc"                     $db->users->remove(array("z" => "abc"));
=====================================
